name: Build-macOS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_macos:
    permissions:
      contents: write
    runs-on: macos-latest
    timeout-minutes: 60
    env:
      BUILD_TYPE: Release
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      VCPKG_FEATURE_FLAGS: "manifests,registries,versions,binarycaching"
      VCPKG_DEFAULT_TRIPLET: arm64-osx
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          persist-credentials: true
          clean: true
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          brew update
          brew install cmake ninja pkg-config

      - name: Cache vcpkg
        uses: actions/cache@v3
        id: vcpkg-cache
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            !${{ github.workspace }}/vcpkg/buildtrees
            !${{ github.workspace }}/vcpkg/packages
            !${{ github.workspace }}/vcpkg/downloads
          key: ${{ runner.os }}-arm64-vcpkg-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-arm64-vcpkg-

      - name: Setup vcpkg
        if: steps.vcpkg-cache.outputs.cache-hit != 'true'
        run: |
          if [ ! -d "${{ github.workspace }}/vcpkg" ]; then
            git clone --depth 1 https://github.com/Microsoft/vcpkg.git ${{ github.workspace }}/vcpkg
          fi
          ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.sh

      - name: Install vcpkg dependencies
        run: |
          export VCPKG_ROOT=${{ github.workspace }}/vcpkg
          $VCPKG_ROOT/vcpkg install --triplet=arm64-osx

      - name: Configure CMake
        run: |
          cmake -B build \
            -S . \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=arm64-osx \
            -DENABLE_MESSAGING_FEATURES=ON \
            -DENABLE_PERFORMANCE_METRICS=ON \
            -DENABLE_EXTERNAL_INTEGRATION=ON \
            -DBUILD_CONTAINER_EXAMPLES=ON \
            -DBUILD_CONTAINER_SAMPLES=ON \
            -DUSE_UNIT_TEST=ON \
            -G Ninja

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Test
        working-directory: build
        run: |
          if [ -f "./bin/examples/messaging_integration_example" ]; then
            echo "Running messaging integration example..."
            ./bin/examples/messaging_integration_example
          fi

      - name: Performance Test
        working-directory: build
        run: |
          if [ -f "./bin/samples/performance_benchmark" ]; then
            echo "Running performance benchmark..."
            ./bin/samples/performance_benchmark || true
          fi

      - name: Package build artifacts
        if: success()
        run: |
          mkdir -p artifacts
          cp -r build/bin artifacts/ || true
          cp -r build/lib artifacts/ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: container-system-macos-arm64-${{ github.sha }}
          path: artifacts/
          retention-days: 30